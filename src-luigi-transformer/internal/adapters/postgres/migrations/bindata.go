// Code generated by go-bindata. DO NOT EDIT.
// sources:
// 000001_create_table.down.sql (0)
// 000001_create_table.up.sql (7.052kB)
// 000002_indexing.down.sql (0)
// 000002_indexing.up.sql (184B)
// 000003_update_tables.down.sql (0)
// 000003_update_tables.up.sql (6.826kB)

package migrations

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_create_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _000001_create_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_create_tableDownSql,
		"000001_create_table.down.sql",
	)
}

func _000001_create_tableDownSql() (*asset, error) {
	bytes, err := _000001_create_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_create_table.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var __000001_create_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x58\xcd\x73\xdb\xb8\x15\xbf\xeb\xaf\xc0\x21\x33\xbb\xd9\xd9\xc4\xdd\x8f\xd3\x66\x7a\x50\x6c\xda\xd1\xd4\x91\x5c\x9a\xaa\x77\xf7\x82\x81\xc0\x27\x0a\x6b\x10\x60\x00\x50\xb5\xd2\xe9\xff\xde\x01\x48\x8b\x00\x04\x52\x8e\xab\x93\x86\xbf\xf7\x01\xbc\xef\x87\x8b\x1f\xd0\xc3\x0e\x04\xa2\x3b\x22\x2a\x26\x2a\x44\xd0\xfd\x3f\x6f\x51\xcd\x2a\x45\x0c\x93\x02\x69\xaa\x58\x63\x7e\x44\xaa\x15\xb3\x4a\xbe\xdb\x30\x51\x12\x43\xd0\xbb\xe6\xb1\x1a\xa8\x34\x7a\xc7\x2a\x21\x15\xa0\x23\x2e\x64\x0d\x86\xf4\xb4\x0a\xb6\xec\x09\x31\x61\x40\x09\xc2\x2f\x48\x49\x1a\x03\x4a\x5f\x34\x52\x9b\x4a\x81\xbe\x18\x24\x5d\xcc\x10\x42\xef\x24\x7a\x7f\xf1\x32\xf2\x5e\xe1\xfb\xea\xc5\x2c\x33\x23\x51\xdb\x94\xc4\x1c\x4f\xfb\xbe\x92\xb3\x1f\x2e\x66\xb3\xcb\x3c\x9b\x17\x19\x5a\xe5\x28\xcf\xee\x6e\xe7\x97\x19\xba\x5e\x2f\x2f\x8b\xc5\x6a\x89\x8c\x62\x55\x05\x0a\x6b\x30\xd8\xb0\x1a\xb4\x21\x75\xf3\xfd\x5b\x7b\x58\x94\x67\xc5\x3a\x5f\xde\xa3\x22\x5f\xdc\xdc\x64\x39\x9a\xdf\xcf\xde\xbc\x99\x7d\xcc\x6e\x16\x4b\x87\x2f\xb3\x87\xf7\x9d\xc2\x12\x13\x83\xfe\x8e\x96\xab\x87\xef\xdf\x7e\xf0\x78\x2d\xc9\x87\x59\xb6\xbc\xfa\x30\x7b\xf3\x06\xdd\xce\x97\x37\xeb\xf9\x4d\x86\x1a\xde\x54\xfa\x0b\xff\x70\x3c\x59\x31\xff\x78\x9b\xa1\xc5\x35\x5a\xae\x0a\x94\xfd\xbe\xb8\x2f\xee\x91\x51\x44\x68\x42\xdd\xd5\x30\x69\xd8\xec\x7b\x27\x98\x95\xe8\xf8\xbb\xcf\xf2\xc5\xfc\xb6\xfb\x6f\x39\x97\xeb\xdb\x5b\x74\x97\x2f\x3e\xcf\xf3\x3f\xd0\x3f\xb2\x3f\x7e\x74\x1c\x9e\x20\xf4\x97\x96\x62\x83\x22\x8e\xab\xec\x7a\xbe\xbe\x2d\xd0\x77\xff\xf9\xef\x77\xbf\xfd\xe6\x48\x3a\x4e\xaa\xe0\xf9\x72\xa8\x58\x7c\xce\xee\x8b\xf9\xe7\xbb\xe2\xcf\x53\x4e\x77\xf1\x8e\xc7\x33\xc8\x0b\x78\x66\x6f\x3d\x23\xf4\x66\x0e\x5c\xe1\x64\x7e\xcc\xae\x57\x79\x86\xd6\x77\x57\xf3\x22\x73\x5f\x9c\xe7\x22\xfb\xd8\xef\xd7\xab\x1c\x65\xf3\xcb\x4f\x28\x5f\x3d\xcc\xb2\xdf\xb3\xcb\x75\x91\xa1\xbb\x7c\x75\x99\x5d\xad\xf3\x6c\xcc\xdb\xd3\x8e\x20\x54\x18\x4c\xa5\x30\x8a\x50\x93\xf0\x42\xff\x5b\x2c\x8b\x09\x27\x90\x5a\x94\xd8\xc5\xe6\xf1\x77\xb4\x0e\x7a\x58\x14\x9f\x56\xeb\xc2\x7d\x41\x7f\xae\x96\x99\xc7\xa3\x8d\xcf\xf4\xaf\x79\x7e\xf9\x69\x9e\x7b\xb8\xdc\x6e\x19\x05\x35\x1c\xc2\xc3\x1a\x05\xfb\xe0\x80\x1d\xd6\x50\xeb\x9c\xe0\x17\xc8\xa5\x52\xe0\x88\x24\xc0\x0d\xa8\x9a\x09\xc2\x2d\x11\x54\x52\x1d\x62\xfe\x33\xf2\xb7\x98\x25\x8c\xd7\x61\x1b\x45\x04\xdd\x8d\xf3\x6a\x50\x7b\x46\x01\x57\x4a\xb6\x4d\xfa\xec\xce\x4f\x58\xb4\xf5\xa6\x33\xcb\x08\x4e\x6a\x48\xf2\xd7\x35\x08\x83\x0d\x3c\x99\x94\xfe\x0d\xd1\x80\x15\xf0\xae\x88\x9e\xe2\xcf\x10\x36\xa4\x4a\xfa\xcc\x0f\x26\x8c\x6d\x1c\x1d\xef\xee\x3e\x63\x73\x68\xe0\xd4\x2e\x1d\xa6\xdb\x8d\x85\x23\x3e\x6b\x13\xdc\x10\xfa\xd8\x7d\x0f\xf8\x24\x2f\x1d\x94\xb2\xb5\xed\x0d\x02\xf8\xa8\xad\x09\xa5\x58\xd3\x1d\xd4\x70\x14\x1c\xc8\xed\xb0\x44\x7c\x29\x59\xb6\x74\x3c\x7e\x7a\xdc\x0f\xcf\x10\x27\xca\xba\xc0\x17\x13\xe0\x35\x61\x02\x87\x4a\x86\x3b\x71\x66\x79\xb1\x97\xa0\x31\xe6\x1b\x78\xc8\x97\xd0\x2f\x92\x95\x03\xc6\x19\xd9\x78\xb1\x7e\x72\x9e\x0e\xef\x79\x23\xb9\x01\xd6\xdd\x78\x88\x75\xc6\x39\x13\x95\xcf\x3a\x60\xb0\x23\x7b\x26\x95\x17\xe8\xa7\xd8\x70\x93\x34\x16\xe9\xa3\x3b\xa0\x8f\x98\xec\x09\xe3\x64\xc3\xe1\x34\xf6\x1d\xde\x6a\x52\x41\xd2\x6f\xb4\x55\x0a\x85\xbf\x00\xb7\x31\x11\xd1\x84\xf1\xd4\x9a\x1d\xe6\xac\x66\x06\x93\x5a\xb6\xc2\x20\x74\xb5\x5a\xdb\x82\x7b\x97\x67\x97\x8b\xfb\xc5\x6a\xe9\x25\xd9\x40\x6d\x3f\xa5\x09\x9d\x75\x37\x84\x13\x41\x9f\x8f\x3c\x45\xc8\x25\x7d\x84\x72\x92\x50\xfe\x5b\x44\x02\xa7\x08\x03\x81\x23\x84\xba\x8d\x8f\x38\x45\xf8\x12\x89\x46\x1a\xc2\x43\xd2\x49\x42\x5f\xf9\x88\xea\x1d\x51\x50\x06\x94\xd3\x84\x9e\xee\x34\x61\xe7\xe0\x20\xd8\xd2\x84\xb6\x27\x62\xd9\x80\x18\x82\xe6\x6c\x63\x74\x3c\xf0\xd4\x30\x05\x2f\xe6\xe1\x44\x1b\xfc\x9c\x71\x5d\x23\x3e\xcb\x23\xe0\xe9\x9b\x79\x9c\x1e\x4d\xc9\xb7\xdc\x87\x12\x55\x46\xf7\x49\x15\x4c\xdb\x56\xec\x38\xd0\xea\xb8\xe9\x6c\x34\xae\xc1\xf6\xbb\x63\xdd\x3b\xc1\x87\x7e\x98\xc0\xa1\x91\x2a\x2c\x8c\x51\xc1\x7d\xc2\x0d\x13\x98\x18\x03\x75\x63\x74\x50\xec\xc3\xef\x28\x6c\x30\xac\x89\xba\xc4\x11\x53\x4c\x3f\x4e\x62\x5b\x42\x8d\x54\xd3\x99\xe0\x11\x3e\x77\x93\x34\x61\xdf\x3e\x7b\xe3\x85\xda\x6a\x50\xb6\x13\x1a\xaf\x67\x84\xe3\x8e\xc2\x86\x19\xee\x4d\x6e\x03\xaf\x51\x98\xca\xba\x21\xe2\x90\xb6\xac\xc3\x5b\x61\xd4\x38\xbe\x65\x4a\xbb\x71\x64\x04\x77\x01\x35\xc0\x27\xb8\x66\x14\xf9\xbf\xb0\xe4\x96\x25\x66\x62\x2b\xf1\xdf\x7e\x3a\x83\xff\x7c\x06\xff\xe5\x0c\xfe\x6b\x12\x3f\x76\x3e\x0e\xfb\x7e\xd2\x08\x70\x9b\x60\x6e\x97\x1c\x39\x7f\x1f\x99\xa4\x2c\x15\x68\x1d\xda\xde\xd5\xa2\xb0\xba\x05\xbc\x4c\xe3\xba\xe5\xe6\x60\x5b\x12\x08\x7a\x38\xd1\x2d\x6c\x61\xd2\x98\x19\x48\xda\x9e\x1e\x28\x07\xcc\x41\x54\x66\x17\xfb\xdd\x2d\xa4\x7b\xc2\xbd\x9c\x09\xc7\x54\x17\x69\xc1\xd0\x10\x8d\x0c\xb6\x0b\x32\x8d\xed\x02\xb3\x3f\x6d\xc5\x1a\x8c\xe1\x50\xfb\xe3\x4a\x7c\x37\x05\xa4\x3c\x8c\xfa\xdd\x36\x4f\x0d\x5f\xb0\x38\x8d\x59\x25\x5b\x63\x0b\x1a\x2b\x4d\x9a\xb7\x69\xf8\x01\x97\xfe\xfc\x76\xbe\xea\x49\x4a\x38\xde\x83\xd2\xc7\xb1\x78\xd0\x07\xb5\x34\x10\x80\x8b\x65\x31\x3b\xb3\x75\xf5\xc3\x5a\xef\xf9\x57\xaf\x5d\x13\x63\xdd\x73\xec\x4e\xe4\x8e\x55\x8d\x39\x13\x80\x7f\x3a\x83\xff\x7c\x06\xff\xe5\x0c\xfe\xeb\x38\x3e\x6c\x2a\x69\xdc\x2b\xdb\xfe\xdd\x1c\xf6\x95\x35\xe9\xbb\xbd\x76\x1d\x7d\xc5\xba\x79\x6e\x8d\xdd\x30\x65\x76\x7e\x85\x8b\xf3\x90\x99\x43\xe4\xf4\x10\xef\x47\x7e\x39\x44\x87\xb7\x36\x35\x07\x6c\xa4\x5f\x40\x3c\x2c\x2c\xcc\xb1\x5c\x37\x65\x6c\x95\xac\xbf\xc1\x46\x8e\xc7\xf8\x21\xf5\x02\x1e\xe0\x6c\x0f\xea\x90\x1a\xe7\x01\xd7\x84\xf1\xf1\xbb\x6f\xc9\x13\x9a\xb2\xcd\x96\x3c\xe1\xdd\x14\x1e\x35\x9f\x44\x9d\x19\x2a\x54\x1a\x9f\xac\x43\x9c\x88\xaa\xf5\xf6\x89\x60\x35\x22\xb1\xea\x88\x57\x52\x6f\xcb\x3e\xc5\xeb\x56\x30\xca\x1a\xc2\x99\x39\x60\x2a\x4b\x48\xaf\x91\xc9\xde\xd1\xec\xa4\x80\x09\xbb\x38\x3c\xb4\x5c\x02\xaf\x47\x71\x4d\x78\x6b\xba\x87\x00\xdd\x6e\xb7\xec\x29\xd1\x1f\xa6\xf4\xc7\x03\x87\x7f\xf6\x56\x85\x01\x11\xf3\x7e\x65\x4d\x6f\x8e\x18\x3f\x57\x73\xdd\x93\x9a\x0b\xc3\xd1\x7a\xfb\xad\xaf\x5c\xaf\x78\xe4\x3a\x2d\x54\x41\x61\x09\xeb\x4a\x50\x8f\x8e\x90\x57\x32\x93\xde\xe9\x1f\x91\x28\x27\x7d\x60\x84\x70\xfc\xfa\x15\xf9\x66\x1a\x2e\x15\xa6\x2a\xed\x39\xa6\x31\xab\x1b\x50\x5a\x0a\x92\x18\x86\x6c\xb2\xb5\x66\x27\x15\xfb\xda\xef\x56\xa7\xb9\xf6\xa5\x65\xea\xb8\x1f\x26\xc6\x19\x4c\xca\xbf\x5a\x6d\xec\xe4\x90\x84\x15\xd8\x3e\xec\xb4\xa7\xe1\x2f\x2d\x68\x73\x22\xdc\x7a\x00\x0f\xe1\x11\xbd\x22\x31\x31\xbe\x3b\xd0\x1d\x51\x15\x60\xd8\xdb\x13\x25\xac\xc5\x74\xd3\xda\x9a\xa9\x44\xef\x8e\x33\x4f\x8d\x63\x8b\x51\x7f\x80\x31\xb8\xd7\x1f\x0d\xcf\xf6\x3e\x7e\xaa\x44\xb3\x67\x67\xaa\x81\x22\xc1\xed\x9e\x59\xfa\x49\x2a\xd2\xcd\xa4\x0a\x3a\xd7\x0b\x86\x9e\xe7\x13\x89\xf2\xff\x49\xc0\x33\xd9\xf4\x8a\xfc\x4c\x67\xd9\x44\x6e\x9e\x49\xc0\xa8\x3c\xa5\x1e\x98\xc3\x24\x0b\xb9\xfb\x58\x18\x71\x8c\x35\x1f\x73\x4e\x2f\xc1\x10\xc6\xa3\x90\x2a\x61\x4b\x5a\xee\xa6\xc2\x8e\xcc\xef\x48\x06\xbc\xef\xc1\xb2\x01\xb4\x55\x43\xa3\x49\xcc\x62\x20\xca\xf6\xb4\x8d\x5a\x8f\xff\x2f\x00\x00\xff\xff\xbe\x41\x9b\xe1\x8c\x1b\x00\x00")

func _000001_create_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_create_tableUpSql,
		"000001_create_table.up.sql",
	)
}

func _000001_create_tableUpSql() (*asset, error) {
	bytes, err := _000001_create_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_create_table.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x6a, 0xaf, 0x59, 0x98, 0xee, 0xce, 0x42, 0xd3, 0xf7, 0x91, 0x75, 0xd5, 0x59, 0xe0, 0x7, 0xfb, 0x28, 0x8d, 0xb, 0xaa, 0x8d, 0x2b, 0xeb, 0x8a, 0xba, 0x71, 0x8e, 0x49, 0xb5, 0x35, 0x3e, 0x79}}
	return a, nil
}

var __000002_indexingDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _000002_indexingDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_indexingDownSql,
		"000002_indexing.down.sql",
	)
}

func _000002_indexingDownSql() (*asset, error) {
	bytes, err := _000002_indexingDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_indexing.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var __000002_indexingUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0e\x72\x75\x0c\x71\x55\xf0\xf4\x73\x71\x8d\x50\xc8\x4d\x2d\x4a\xce\x48\xcc\x2b\x89\xcf\x4c\x51\xf0\xf7\x53\x28\x29\x4a\xcc\x2b\x4e\x4c\x2e\xc9\xcc\xcf\x2b\x8e\x4f\x2c\xc8\x54\x08\x0d\xf6\xf4\x73\x57\x48\x2a\x29\x4a\x4d\x55\xd0\xd0\x40\x92\x56\xd0\xb5\x53\x4f\x4e\x2c\x4a\x89\x4f\x4c\x4e\x4e\x2d\x28\xc9\x2f\x52\xd7\xb5\xb3\x53\xcf\x4c\x51\xd7\xd4\xb4\xe6\x42\xb1\x02\x49\x13\x39\xb6\xc0\x0d\x05\x04\x00\x00\xff\xff\x49\x6d\x76\xd0\xb8\x00\x00\x00")

func _000002_indexingUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_indexingUpSql,
		"000002_indexing.up.sql",
	)
}

func _000002_indexingUpSql() (*asset, error) {
	bytes, err := _000002_indexingUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_indexing.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe1, 0x40, 0x83, 0xd5, 0x96, 0xa7, 0xde, 0xc2, 0x7c, 0x9, 0xa4, 0x48, 0x77, 0x6a, 0xfa, 0xf1, 0x95, 0x4b, 0xe, 0xa8, 0x95, 0xb7, 0xe8, 0x79, 0x11, 0xda, 0x6, 0x2e, 0xaf, 0xd9, 0x64, 0x15}}
	return a, nil
}

var __000003_update_tablesDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _000003_update_tablesDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000003_update_tablesDownSql,
		"000003_update_tables.down.sql",
	)
}

func _000003_update_tablesDownSql() (*asset, error) {
	bytes, err := _000003_update_tablesDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000003_update_tables.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var __000003_update_tablesUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x98\xcd\x72\xdb\x36\x10\x80\xef\x7e\x0a\x1e\xdb\x99\x1e\x9a\x9f\x5b\x4e\x4e\xa2\x36\x9a\x26\xb6\xc7\x56\xda\xa6\x17\xcc\x0a\x58\x49\xa8\x41\x80\x01\x16\xaa\x94\xa7\xef\x80\xa4\x4d\x00\x04\x49\xc7\xd1\x51\xdf\x2e\x00\x2e\xf6\x17\xef\x6f\xaf\x6f\xaa\xcd\xe5\xdb\x8f\xab\x6a\xfd\x5b\xb5\xfa\x7b\x7d\xb7\xb9\xab\x80\x6b\x62\xdc\x68\xb2\xc0\xe9\xcd\x45\x51\x86\x2b\x89\x9a\x18\x08\x61\xd1\xb9\x09\x21\xb2\xa0\x1d\xa3\x73\x83\xb3\x02\xdc\x68\xf1\xe6\xe2\xe2\xdd\xed\xea\x72\xb3\x1a\x64\xae\xae\x37\xc5\x13\x5d\xfc\x74\x51\x55\x55\x25\x45\x95\xff\xde\xae\x7f\x5f\x5f\x6d\x5a\xc5\xab\xcf\x1f\x3f\x56\x37\xb7\xeb\x4f\x97\xb7\x5f\xaa\x3f\x56\x5f\x7e\x69\x75\xa0\xd6\x82\x09\x20\x1c\x74\x36\xeb\x4f\xab\xbb\xcd\xe5\xa7\x9b\xea\xaf\xf5\xe6\xc3\xf5\xe7\x4d\xfb\x4f\xf5\xcf\xf5\xd5\x2a\xd2\x71\x14\x2b\xfd\x79\x79\xfb\xee\xc3\xe5\x6d\xc4\xcd\x6e\x27\x39\xda\xe4\x1c\x11\x6e\x2c\x1e\xf3\x63\x76\xb8\xe1\x40\xd9\x57\x24\xab\x73\xa3\x59\x26\x92\x70\x42\x5b\x4b\x0d\x2a\x08\xe1\xde\xd8\x73\xae\xbf\xb0\xfe\x8e\xc9\xb2\x15\x3b\xbc\xb5\xa0\xf9\x61\x5a\xdd\xa1\x3d\x4a\x8e\x6c\x6f\x8d\x6f\xca\xc7\x6f\xef\x8c\x69\x5f\x6f\x3b\xfb\x4c\x70\xa8\xb1\xa8\x5f\xd7\xc1\xcf\x08\x4f\x54\xda\x7f\x0b\x0e\x99\x45\x05\x24\x8d\x2e\xf0\x07\xc4\x08\xf6\xc5\xcb\x8b\x1d\x8b\xb1\xe0\x53\xf1\xe7\xb7\xa4\x75\xe0\xa2\x75\x3a\xec\xfc\x36\x48\x8c\xb5\x83\x71\x58\x03\xfc\xbe\x43\xb9\xb6\x51\xa2\xa5\x13\xa6\xe7\x07\xd0\x1a\xd5\xa4\xe9\x81\x73\xe6\xf8\x01\x6b\x7c\x5c\x3e\x5f\xbd\xc3\x65\xbf\xb3\x46\x78\x3e\xed\x57\x3d\x8f\x3d\x37\xe5\x60\xc3\xbd\xc4\xcb\x24\xbc\x06\xa9\x59\xba\x49\xf2\x71\x5d\xfa\x60\x51\x10\x17\x70\x6c\xf8\x24\xa6\xd2\x5b\x33\x52\x24\x58\x49\xd8\x46\xf1\x30\x3a\x5b\xc7\x7b\xf5\xf1\xea\x09\xee\x0c\x90\x84\x84\x54\x4a\xea\x7d\xbc\x40\x82\xf1\x00\x47\x69\x6c\x14\x12\x45\x3c\x7c\xdb\x24\x1e\xef\xcd\x0f\xc8\xef\x19\x1c\x41\x2a\xd8\x2a\x1c\x87\x4b\xcb\xbd\x83\x3d\x16\x6f\x95\x7b\x6b\xab\xf4\x97\xf0\xe0\x34\x99\x4c\xea\x73\x9e\x0e\x4c\xc9\x5a\x12\x83\xda\x78\x4d\x55\xf5\xfe\xfa\x73\xc8\xd7\x37\xb7\xab\x77\xeb\xbb\xf5\xf5\x55\x14\x97\x83\x74\xf8\xab\x2c\xd8\x1a\x7b\x0b\x0a\x34\x7f\x38\xf2\x9c\xa0\x32\xfc\x1e\xc5\xac\xa0\xf9\x4f\x67\x0b\xce\x09\x26\x0b\x4e\x08\x3a\x9f\x1f\x71\x4e\xf0\x29\x2b\x92\x21\x50\xa9\xe8\xac\x60\xbc\xf9\xc4\xd6\x07\xb0\x28\x12\xc9\x79\xc1\x68\xef\xb2\x60\x77\xc1\x89\xb3\x95\x05\x43\x3d\x65\xa6\x41\x3d\x38\xcd\x62\x51\x6d\x75\xf0\xd4\x48\x8b\x4f\xd6\x51\xe0\x88\x3d\x44\x5f\x57\xc4\x17\x75\x34\x9e\xbe\x5b\xa7\xdd\xc7\x71\xf8\x9e\xef\xe1\x60\x45\xf6\x3d\xa5\x74\x1a\x2a\x51\x68\x25\xbc\xcb\xeb\xd4\xd6\xb1\x1a\x43\x89\x7c\x4c\x89\x23\x3e\x94\xd0\x02\xc7\xc6\xd8\x34\x61\x66\xe9\xf8\xc4\x1a\xa9\x19\x10\x61\xdd\x90\xcb\xab\x41\x8a\xaa\x51\x29\x92\x4d\x56\x4c\x62\x6c\xa5\xbb\x5f\xc2\x3b\xe0\x64\xec\x7c\x54\x44\x82\x0f\x75\xa7\x2c\xd8\xd7\xdd\xde\x90\xa3\x0d\x6b\xb4\xa1\x78\x52\x54\x5d\xd2\x9e\xc9\x32\x92\xa4\xa2\x26\x30\x51\x27\xcb\xb8\xa9\x1b\xd0\xe7\xb2\xad\x5b\xee\x35\xd9\x69\xbe\x93\xd6\xb5\x3d\xcd\x04\x6f\x5d\x6c\xc0\x23\xee\x24\xaf\xe2\x5f\x9a\x84\x85\x60\x52\xef\x0c\xfb\xf5\xc5\x02\x7f\xb9\xc0\x5f\x2d\xf0\xd7\x45\xfe\x58\x1a\x15\x1e\xfb\xfe\x24\xe1\x21\xe4\x04\x10\x4c\x9d\xbf\xf7\xd5\x7e\x74\x18\x99\xbf\x4d\x50\x69\xca\x4b\xd4\xa5\x63\xb5\x57\x74\x0e\x75\x0a\x35\x3f\x8f\xb6\xd7\x21\x5b\x39\x26\x09\x8b\xe6\xe7\x67\xae\x90\x29\xd4\x7b\x3a\x14\x6e\x5f\x6a\x42\x7b\x04\x15\xc5\x52\xda\xf1\xb6\x5e\x97\xb4\x17\x59\x73\x11\xaa\xa3\x74\x0c\x38\xc9\xe3\xb8\x44\x3b\x24\x52\x58\xc7\xed\x4d\xfe\x79\x16\x41\x9c\x27\x6f\x3f\x14\x55\x87\x5f\x99\x2e\x3a\xaf\x35\x9e\x42\xae\x93\x82\xca\xea\x4d\xa3\xce\x4c\xc4\x8d\xdf\x72\x42\x34\x1c\x14\x3b\xa2\x75\x8f\x4d\x76\xb2\x25\xd6\x86\x30\xe1\x1d\xbe\xf8\x79\x7e\xaa\x4b\x67\xc8\x1f\x19\xeb\xe6\xfb\xc1\x07\x87\x9e\x09\xa8\x70\x00\xa6\xa4\x46\xf6\x62\x81\xbf\x5c\xe0\xaf\x16\xf8\xeb\x69\x3e\xcc\x40\x65\x1e\x65\xf7\xec\xf3\x5a\xfc\x4d\x36\xe5\xcf\x7b\xee\xd0\xfb\xec\xa1\x76\x69\x64\xde\x4a\x4b\x87\x38\xff\xe5\x21\x2a\xe9\x9c\xf9\x40\xca\xfb\xe9\xc1\x0c\xce\x92\x8e\x65\xcd\x99\x91\x89\x33\x4c\x8a\xd3\xe4\x9d\xaf\xde\xf6\x26\x3b\x6b\xea\xef\xb0\x57\xab\x43\xb1\x87\x3d\x41\x07\x95\x3c\xa2\x3d\x4f\x8c\x02\xc8\x6a\x90\x6a\xda\x08\x3b\x38\x55\x73\x46\xda\xc1\x89\x1d\xe6\x78\x56\xa3\x0a\x89\x68\x48\x61\x65\x3e\x9b\xa8\x14\xe8\xbd\x8f\x06\x91\x7c\xca\x82\x7c\xf7\x4c\xdd\xf0\x68\xa8\x1f\xf3\xda\x6b\xc9\x65\x03\x4a\xd2\x99\x71\x23\xb0\x3c\xa0\x4e\x55\x99\xe6\x60\x34\xce\x58\xa7\xe5\xa9\xfd\x0a\xbc\x9e\xe4\x0e\x94\xa7\xee\xe9\xc1\xf9\xdd\x4e\x9e\x0a\x65\x64\x6e\xff\xbc\x41\xc9\x8e\xef\x6d\xea\x19\xb9\xfa\x37\xd9\xf4\x46\xc9\xf9\x52\x52\x1e\xde\xec\x26\x13\xf2\x33\x9e\xd9\x9e\xf1\xca\x36\xce\x61\x49\xc2\x19\xe5\x9b\x24\x5b\xc5\x34\x4a\xab\xc5\x9b\xea\x9f\xb0\xb8\x82\xde\x4f\x52\x9c\x3f\xbf\x65\xf7\x34\x8f\x85\x65\xdc\x4e\xde\xa2\x74\x4c\xd6\x0d\x5a\x67\x34\x14\x1a\xa9\x10\x81\x9e\x0e\xc6\xca\x6f\xfd\xa4\x36\x0e\xc0\xaf\x5e\xda\xc7\x69\xb3\xd0\x07\x31\x10\xff\x7a\x47\xa1\xdf\x28\x62\x8b\xa1\x6e\xb7\xbb\x97\xf1\x57\x8f\x8e\x46\x8b\x87\xab\x60\x83\xab\x8c\x9f\xae\xa4\x9e\x1e\x46\xf8\x01\xec\x1e\x19\x1e\xc3\xa1\x0a\x36\x93\xae\xf1\x21\x9d\x5a\xdd\x5f\xca\xc2\x8b\xe7\xd4\xa4\xd5\x1f\x60\x0a\xf7\xfb\x67\xbd\x77\xf7\x20\x2d\xca\x27\x7f\xb0\xd6\x20\x51\xd0\x6e\x9f\x6e\xfa\xfe\x2b\xdb\x5b\x1a\x9b\x94\xb6\xa7\xf5\x49\xc3\x2b\xf9\x0f\x86\xe4\x42\x7c\x3d\x23\x62\x27\x83\x6e\x3e\x60\x17\x42\x32\xcb\x5c\xa5\x37\xef\x34\xec\x52\xed\xde\x2f\x26\x2e\x29\xd8\x51\xb6\x0e\x20\x90\x40\xaa\xcc\xbd\x04\xee\xc0\xab\xb6\x9d\xec\xc4\xb2\xaa\x45\x18\xa1\x7c\x74\x41\xee\xed\x50\x8f\x0a\x7d\x1c\x6a\xe1\xc7\x05\x77\xc9\x01\xc0\x9f\xba\x60\x83\xd6\x73\x1d\x83\x46\x16\x5d\x61\xd1\x0d\x1c\x28\x62\x64\xee\x51\x87\xe1\x38\x1b\xdb\x1a\x69\xcf\x0f\x4e\xf0\xc4\x93\x6d\x43\x9c\x87\x4c\x31\x3e\xce\xe2\x59\xa2\x3e\x2c\xbb\x3f\x2b\xd8\xd6\x82\x16\xf1\x29\xfe\x0f\x00\x00\xff\xff\xe6\xdf\x2a\xbc\xaa\x1a\x00\x00")

func _000003_update_tablesUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000003_update_tablesUpSql,
		"000003_update_tables.up.sql",
	)
}

func _000003_update_tablesUpSql() (*asset, error) {
	bytes, err := _000003_update_tablesUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000003_update_tables.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xbd, 0x81, 0xc, 0x96, 0x2f, 0x5a, 0x12, 0x61, 0xc8, 0x1, 0xd2, 0xc8, 0x0, 0xa3, 0xed, 0x9, 0xbf, 0xba, 0x13, 0x89, 0x71, 0x2e, 0x4f, 0xc3, 0xcc, 0x1d, 0xbf, 0x78, 0xb8, 0x6a, 0xef, 0xf3}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_create_table.down.sql":  _000001_create_tableDownSql,
	"000001_create_table.up.sql":    _000001_create_tableUpSql,
	"000002_indexing.down.sql":      _000002_indexingDownSql,
	"000002_indexing.up.sql":        _000002_indexingUpSql,
	"000003_update_tables.down.sql": _000003_update_tablesDownSql,
	"000003_update_tables.up.sql":   _000003_update_tablesUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_create_table.down.sql":  {_000001_create_tableDownSql, map[string]*bintree{}},
	"000001_create_table.up.sql":    {_000001_create_tableUpSql, map[string]*bintree{}},
	"000002_indexing.down.sql":      {_000002_indexingDownSql, map[string]*bintree{}},
	"000002_indexing.up.sql":        {_000002_indexingUpSql, map[string]*bintree{}},
	"000003_update_tables.down.sql": {_000003_update_tablesDownSql, map[string]*bintree{}},
	"000003_update_tables.up.sql":   {_000003_update_tablesUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
