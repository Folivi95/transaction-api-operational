// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/saltpay/transaction-api-operational/src-luigi-transformer/internal/application/models"
	"github.com/saltpay/transaction-api-operational/src-luigi-transformer/internal/application/ports"
	"sync"
)

// Ensure, that DBHandlerMock does implement ports.DBHandler.
// If this is not the case, regenerate this file with moq.
var _ ports.DBHandler = &DBHandlerMock{}

// DBHandlerMock is a mock implementation of ports.DBHandler.
//
// 	func TestSomethingThatUsesDBHandler(t *testing.T) {
//
// 		// make and configure a mocked ports.DBHandler
// 		mockedDBHandler := &DBHandlerMock{
// 			GetFunc: func(ctx context.Context, query string, target []interface{}) error {
// 				panic("mock out the Get method")
// 			},
// 			StoreFunc: func(ctx context.Context, transactionJSON []byte) error {
// 				panic("mock out the Store method")
// 			},
// 			StoreAuxTableFunc: func(ctx context.Context, transaction models.W4IncomingTransaction, insert bool) error {
// 				panic("mock out the StoreAuxTable method")
// 			},
// 			UpsertFunc: func(ctx context.Context, entry map[string]interface{}, tableName string) error {
// 				panic("mock out the Upsert method")
// 			},
// 		}
//
// 		// use mockedDBHandler in code that requires ports.DBHandler
// 		// and then make assertions.
//
// 	}
type DBHandlerMock struct {
	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, query string, target []interface{}) error

	// StoreFunc mocks the Store method.
	StoreFunc func(ctx context.Context, transactionJSON []byte) error

	// StoreAuxTableFunc mocks the StoreAuxTable method.
	StoreAuxTableFunc func(ctx context.Context, transaction models.W4IncomingTransaction, insert bool) error

	// UpsertFunc mocks the Upsert method.
	UpsertFunc func(ctx context.Context, entry map[string]interface{}, tableName string) error

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Query is the query argument value.
			Query string
			// Target is the target argument value.
			Target []interface{}
		}
		// Store holds details about calls to the Store method.
		Store []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// TransactionJSON is the transactionJSON argument value.
			TransactionJSON []byte
		}
		// StoreAuxTable holds details about calls to the StoreAuxTable method.
		StoreAuxTable []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Transaction is the transaction argument value.
			Transaction models.W4IncomingTransaction
			// Insert is the insert argument value.
			Insert bool
		}
		// Upsert holds details about calls to the Upsert method.
		Upsert []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Entry is the entry argument value.
			Entry map[string]interface{}
			// TableName is the tableName argument value.
			TableName string
		}
	}
	lockGet           sync.RWMutex
	lockStore         sync.RWMutex
	lockStoreAuxTable sync.RWMutex
	lockUpsert        sync.RWMutex
}

// Get calls GetFunc.
func (mock *DBHandlerMock) Get(ctx context.Context, query string, target []interface{}) error {
	if mock.GetFunc == nil {
		panic("DBHandlerMock.GetFunc: method is nil but DBHandler.Get was just called")
	}
	callInfo := struct {
		Ctx    context.Context
		Query  string
		Target []interface{}
	}{
		Ctx:    ctx,
		Query:  query,
		Target: target,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, query, target)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedDBHandler.GetCalls())
func (mock *DBHandlerMock) GetCalls() []struct {
	Ctx    context.Context
	Query  string
	Target []interface{}
} {
	var calls []struct {
		Ctx    context.Context
		Query  string
		Target []interface{}
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// Store calls StoreFunc.
func (mock *DBHandlerMock) Store(ctx context.Context, transactionJSON []byte) error {
	if mock.StoreFunc == nil {
		panic("DBHandlerMock.StoreFunc: method is nil but DBHandler.Store was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		TransactionJSON []byte
	}{
		Ctx:             ctx,
		TransactionJSON: transactionJSON,
	}
	mock.lockStore.Lock()
	mock.calls.Store = append(mock.calls.Store, callInfo)
	mock.lockStore.Unlock()
	return mock.StoreFunc(ctx, transactionJSON)
}

// StoreCalls gets all the calls that were made to Store.
// Check the length with:
//     len(mockedDBHandler.StoreCalls())
func (mock *DBHandlerMock) StoreCalls() []struct {
	Ctx             context.Context
	TransactionJSON []byte
} {
	var calls []struct {
		Ctx             context.Context
		TransactionJSON []byte
	}
	mock.lockStore.RLock()
	calls = mock.calls.Store
	mock.lockStore.RUnlock()
	return calls
}

// StoreAuxTable calls StoreAuxTableFunc.
func (mock *DBHandlerMock) StoreAuxTable(ctx context.Context, transaction models.W4IncomingTransaction, insert bool) error {
	if mock.StoreAuxTableFunc == nil {
		panic("DBHandlerMock.StoreAuxTableFunc: method is nil but DBHandler.StoreAuxTable was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Transaction models.W4IncomingTransaction
		Insert      bool
	}{
		Ctx:         ctx,
		Transaction: transaction,
		Insert:      insert,
	}
	mock.lockStoreAuxTable.Lock()
	mock.calls.StoreAuxTable = append(mock.calls.StoreAuxTable, callInfo)
	mock.lockStoreAuxTable.Unlock()
	return mock.StoreAuxTableFunc(ctx, transaction, insert)
}

// StoreAuxTableCalls gets all the calls that were made to StoreAuxTable.
// Check the length with:
//     len(mockedDBHandler.StoreAuxTableCalls())
func (mock *DBHandlerMock) StoreAuxTableCalls() []struct {
	Ctx         context.Context
	Transaction models.W4IncomingTransaction
	Insert      bool
} {
	var calls []struct {
		Ctx         context.Context
		Transaction models.W4IncomingTransaction
		Insert      bool
	}
	mock.lockStoreAuxTable.RLock()
	calls = mock.calls.StoreAuxTable
	mock.lockStoreAuxTable.RUnlock()
	return calls
}

// Upsert calls UpsertFunc.
func (mock *DBHandlerMock) Upsert(ctx context.Context, entry map[string]interface{}, tableName string) error {
	if mock.UpsertFunc == nil {
		panic("DBHandlerMock.UpsertFunc: method is nil but DBHandler.Upsert was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Entry     map[string]interface{}
		TableName string
	}{
		Ctx:       ctx,
		Entry:     entry,
		TableName: tableName,
	}
	mock.lockUpsert.Lock()
	mock.calls.Upsert = append(mock.calls.Upsert, callInfo)
	mock.lockUpsert.Unlock()
	return mock.UpsertFunc(ctx, entry, tableName)
}

// UpsertCalls gets all the calls that were made to Upsert.
// Check the length with:
//     len(mockedDBHandler.UpsertCalls())
func (mock *DBHandlerMock) UpsertCalls() []struct {
	Ctx       context.Context
	Entry     map[string]interface{}
	TableName string
} {
	var calls []struct {
		Ctx       context.Context
		Entry     map[string]interface{}
		TableName string
	}
	mock.lockUpsert.RLock()
	calls = mock.calls.Upsert
	mock.lockUpsert.RUnlock()
	return calls
}
