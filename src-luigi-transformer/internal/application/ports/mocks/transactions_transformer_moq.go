// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/saltpay/go-kafka-driver"
	"github.com/saltpay/transaction-api-operational/src-luigi-transformer/internal/application/models"
	"github.com/saltpay/transaction-api-operational/src-luigi-transformer/internal/application/ports"
	"sync"
)

// Ensure, that TransactionsTransformerMock does implement ports.TransactionsTransformer.
// If this is not the case, regenerate this file with moq.
var _ ports.TransactionsTransformer = &TransactionsTransformerMock{}

// TransactionsTransformerMock is a mock implementation of ports.TransactionsTransformer.
//
// 	func TestSomethingThatUsesTransactionsTransformer(t *testing.T) {
//
// 		// make and configure a mocked ports.TransactionsTransformer
// 		mockedTransactionsTransformer := &TransactionsTransformerMock{
// 			ExecuteFunc: func(ctx context.Context, incomingTransactionMessage kafka.Message) (models.Transaction, error) {
// 				panic("mock out the Execute method")
// 			},
// 		}
//
// 		// use mockedTransactionsTransformer in code that requires ports.TransactionsTransformer
// 		// and then make assertions.
//
// 	}
type TransactionsTransformerMock struct {
	// ExecuteFunc mocks the Execute method.
	ExecuteFunc func(ctx context.Context, incomingTransactionMessage kafka.Message) (models.Transaction, error)

	// calls tracks calls to the methods.
	calls struct {
		// Execute holds details about calls to the Execute method.
		Execute []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// IncomingTransactionMessage is the incomingTransactionMessage argument value.
			IncomingTransactionMessage kafka.Message
		}
	}
	lockExecute sync.RWMutex
}

// Execute calls ExecuteFunc.
func (mock *TransactionsTransformerMock) Execute(ctx context.Context, incomingTransactionMessage kafka.Message) (models.Transaction, error) {
	if mock.ExecuteFunc == nil {
		panic("TransactionsTransformerMock.ExecuteFunc: method is nil but TransactionsTransformer.Execute was just called")
	}
	callInfo := struct {
		Ctx                        context.Context
		IncomingTransactionMessage kafka.Message
	}{
		Ctx:                        ctx,
		IncomingTransactionMessage: incomingTransactionMessage,
	}
	mock.lockExecute.Lock()
	mock.calls.Execute = append(mock.calls.Execute, callInfo)
	mock.lockExecute.Unlock()
	return mock.ExecuteFunc(ctx, incomingTransactionMessage)
}

// ExecuteCalls gets all the calls that were made to Execute.
// Check the length with:
//     len(mockedTransactionsTransformer.ExecuteCalls())
func (mock *TransactionsTransformerMock) ExecuteCalls() []struct {
	Ctx                        context.Context
	IncomingTransactionMessage kafka.Message
} {
	var calls []struct {
		Ctx                        context.Context
		IncomingTransactionMessage kafka.Message
	}
	mock.lockExecute.RLock()
	calls = mock.calls.Execute
	mock.lockExecute.RUnlock()
	return calls
}
