// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/saltpay/transaction-api-operational/src-luigi-transformer/internal/application/models"
	"github.com/saltpay/transaction-api-operational/src-luigi-transformer/internal/application/ports"
	"sync"
)

// Ensure, that WriterMock does implement ports.Writer.
// If this is not the case, regenerate this file with moq.
var _ ports.Writer = &WriterMock{}

// WriterMock is a mock implementation of ports.Writer.
//
// 	func TestSomethingThatUsesWriter(t *testing.T) {
//
// 		// make and configure a mocked ports.Writer
// 		mockedWriter := &WriterMock{
// 			WriteDBFunc: func(ctx context.Context, transaction models.Transaction) error {
// 				panic("mock out the WriteDB method")
// 			},
// 			WriteKafkaFunc: func(ctx context.Context, transaction models.Transaction) error {
// 				panic("mock out the WriteKafka method")
// 			},
// 		}
//
// 		// use mockedWriter in code that requires ports.Writer
// 		// and then make assertions.
//
// 	}
type WriterMock struct {
	// WriteDBFunc mocks the WriteDB method.
	WriteDBFunc func(ctx context.Context, transaction models.Transaction) error

	// WriteKafkaFunc mocks the WriteKafka method.
	WriteKafkaFunc func(ctx context.Context, transaction models.Transaction) error

	// calls tracks calls to the methods.
	calls struct {
		// WriteDB holds details about calls to the WriteDB method.
		WriteDB []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Transaction is the transaction argument value.
			Transaction models.Transaction
		}
		// WriteKafka holds details about calls to the WriteKafka method.
		WriteKafka []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Transaction is the transaction argument value.
			Transaction models.Transaction
		}
	}
	lockWriteDB    sync.RWMutex
	lockWriteKafka sync.RWMutex
}

// WriteDB calls WriteDBFunc.
func (mock *WriterMock) WriteDB(ctx context.Context, transaction models.Transaction) error {
	if mock.WriteDBFunc == nil {
		panic("WriterMock.WriteDBFunc: method is nil but Writer.WriteDB was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Transaction models.Transaction
	}{
		Ctx:         ctx,
		Transaction: transaction,
	}
	mock.lockWriteDB.Lock()
	mock.calls.WriteDB = append(mock.calls.WriteDB, callInfo)
	mock.lockWriteDB.Unlock()
	return mock.WriteDBFunc(ctx, transaction)
}

// WriteDBCalls gets all the calls that were made to WriteDB.
// Check the length with:
//     len(mockedWriter.WriteDBCalls())
func (mock *WriterMock) WriteDBCalls() []struct {
	Ctx         context.Context
	Transaction models.Transaction
} {
	var calls []struct {
		Ctx         context.Context
		Transaction models.Transaction
	}
	mock.lockWriteDB.RLock()
	calls = mock.calls.WriteDB
	mock.lockWriteDB.RUnlock()
	return calls
}

// WriteKafka calls WriteKafkaFunc.
func (mock *WriterMock) WriteKafka(ctx context.Context, transaction models.Transaction) error {
	if mock.WriteKafkaFunc == nil {
		panic("WriterMock.WriteKafkaFunc: method is nil but Writer.WriteKafka was just called")
	}
	callInfo := struct {
		Ctx         context.Context
		Transaction models.Transaction
	}{
		Ctx:         ctx,
		Transaction: transaction,
	}
	mock.lockWriteKafka.Lock()
	mock.calls.WriteKafka = append(mock.calls.WriteKafka, callInfo)
	mock.lockWriteKafka.Unlock()
	return mock.WriteKafkaFunc(ctx, transaction)
}

// WriteKafkaCalls gets all the calls that were made to WriteKafka.
// Check the length with:
//     len(mockedWriter.WriteKafkaCalls())
func (mock *WriterMock) WriteKafkaCalls() []struct {
	Ctx         context.Context
	Transaction models.Transaction
} {
	var calls []struct {
		Ctx         context.Context
		Transaction models.Transaction
	}
	mock.lockWriteKafka.RLock()
	calls = mock.calls.WriteKafka
	mock.lockWriteKafka.RUnlock()
	return calls
}
