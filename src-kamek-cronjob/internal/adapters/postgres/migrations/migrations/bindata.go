// Code generated by go-bindata. DO NOT EDIT.
// sources:
// 000001_create_table.down.sql (0)
// 000001_create_table.up.sql (814B)
// 000002_indexing.down.sql (0)
// 000002_indexing.up.sql (184B)

package migrations

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_create_tableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _000001_create_tableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_create_tableDownSql,
		"000001_create_table.down.sql",
	)
}

func _000001_create_tableDownSql() (*asset, error) {
	bytes, err := _000001_create_tableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_create_table.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var __000001_create_tableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\x51\x6f\xda\x30\x14\x85\xdf\xfd\x2b\xce\x03\x52\xa1\x2a\xe4\xbd\x68\x0f\x26\x5c\x58\xb4\x90\x30\xc7\x11\xed\x5e\x90\x0b\x9e\xeb\x0d\x9c\xcc\x76\xa5\x49\xd3\xfe\xfb\x44\x60\x94\x75\xaa\x44\x9e\x22\xdf\xf3\x9d\x7b\xef\xb9\xc9\x2d\x56\xcf\xda\x61\xf3\xac\x9c\xb1\xce\x40\xa1\xfa\x9c\x63\x6f\x8d\x57\xd1\x36\x0e\x61\xe3\x6d\x1b\xef\xe0\x5f\x1c\x33\xcd\xf0\xc9\xba\xad\x8a\x0a\xc3\xf6\xbb\x79\x55\x05\x0c\xad\x71\x8d\xd7\x38\xd7\x5d\xb3\xd7\x51\x9d\xb4\x5e\x7f\xb5\x3f\x61\x5d\xd4\xde\xa9\x5d\xa2\xb6\xaa\x8d\xda\x87\xa4\x6d\x42\x34\x5e\x87\xe4\xd5\x29\x61\x00\x86\x0d\x46\xc9\x75\xf2\x53\xc3\x91\xb9\x1a\x61\xb1\xc1\x4b\xbb\x55\xf1\x3c\xed\xc8\x34\xec\x36\x61\x2c\x15\xc4\x25\xa1\x14\x10\xb4\xcc\x79\x4a\x98\xd5\x45\x2a\xb3\xb2\x40\xf4\xd6\x18\xed\xd7\x41\xc7\x75\xb4\x7b\x1d\xa2\xda\xb7\xfd\xc1\x61\x58\x08\x92\xb5\x28\x2a\x48\x91\xcd\xe7\x24\xc0\x2b\xd6\xeb\xb1\x09\xcd\xb3\xa2\xab\x17\xb4\x1a\x1d\x1b\x6e\xd7\x2a\xe2\x03\x8a\x72\xd5\x1f\x8c\x2f\xd8\x83\x64\xcc\xa8\x98\x8e\x59\xaf\x87\x9c\x17\xf3\x9a\xcf\x09\xed\xae\x35\xe1\xc7\x6e\x7c\x9e\x4c\xf2\x49\x4e\xc8\x66\x28\x4a\x09\x7a\xc8\x2a\x59\x21\x7a\xe5\x82\xda\x74\xab\xad\x55\x6b\x59\xbf\x33\xb6\x5b\x9c\xbf\x8a\x44\xc6\xf3\xe3\xff\x81\x2c\xea\x3c\xc7\x52\x64\x0b\x2e\x1e\xf1\x89\x1e\xef\x3a\xe2\xc2\x08\xdf\x42\xe3\x9e\xf0\x86\x98\xd2\x8c\xd7\xb9\xc4\xcd\xaf\xdf\x37\xf7\xf7\x9d\xe4\x48\x6e\xbc\xfe\xbb\x1c\x64\xb6\xa0\x4a\xf2\xc5\x52\x7e\xf9\x9f\xec\x16\x3f\x32\x17\x81\x5c\xc1\xb0\xc1\x45\x08\xa7\x98\xff\x39\x45\xe7\x39\xa1\x59\x29\x08\xf5\x72\xca\x25\x75\x2f\xdd\xe5\xde\xe4\x73\x78\x9f\x95\x02\xc4\xd3\x8f\x10\xe5\x8a\xd1\x03\xa5\xb5\x24\x2c\x45\x99\xd2\xb4\x16\xf4\xde\xb5\xc7\x7f\x02\x00\x00\xff\xff\xde\x9f\xac\x47\x2e\x03\x00\x00")

func _000001_create_tableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_create_tableUpSql,
		"000001_create_table.up.sql",
	)
}

func _000001_create_tableUpSql() (*asset, error) {
	bytes, err := _000001_create_tableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_create_table.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xf8, 0xc, 0xb9, 0x5f, 0x13, 0x86, 0xe5, 0x91, 0xd9, 0xf0, 0xe1, 0x31, 0xb1, 0x4e, 0xe9, 0x7f, 0xf6, 0xe3, 0xd4, 0x8f, 0x1d, 0xc5, 0xda, 0xef, 0x18, 0x8c, 0xb7, 0x78, 0xe0, 0x3, 0x12, 0x10}}
	return a, nil
}

var __000002_indexingDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func _000002_indexingDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_indexingDownSql,
		"000002_indexing.down.sql",
	)
}

func _000002_indexingDownSql() (*asset, error) {
	bytes, err := _000002_indexingDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_indexing.down.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe3, 0xb0, 0xc4, 0x42, 0x98, 0xfc, 0x1c, 0x14, 0x9a, 0xfb, 0xf4, 0xc8, 0x99, 0x6f, 0xb9, 0x24, 0x27, 0xae, 0x41, 0xe4, 0x64, 0x9b, 0x93, 0x4c, 0xa4, 0x95, 0x99, 0x1b, 0x78, 0x52, 0xb8, 0x55}}
	return a, nil
}

var __000002_indexingUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0e\x72\x75\x0c\x71\x55\xf0\xf4\x73\x71\x8d\x50\xc8\x4d\x2d\x4a\xce\x48\xcc\x2b\x89\xcf\x4c\x51\xf0\xf7\x53\x28\x29\x4a\xcc\x2b\x4e\x4c\x2e\xc9\xcc\xcf\x2b\x8e\x4f\x2c\xc8\x54\x08\x0d\xf6\xf4\x73\x57\x48\x2a\x29\x4a\x4d\x55\xd0\xd0\x40\x92\x56\xd0\xb5\x53\x4f\x4e\x2c\x4a\x89\x4f\x4c\x4e\x4e\x2d\x28\xc9\x2f\x52\xd7\xb5\xb3\x53\xcf\x4c\x51\xd7\xd4\xb4\xe6\x42\xb1\x02\x49\x13\x39\xb6\xc0\x0d\x05\x04\x00\x00\xff\xff\x49\x6d\x76\xd0\xb8\x00\x00\x00")

func _000002_indexingUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000002_indexingUpSql,
		"000002_indexing.up.sql",
	)
}

func _000002_indexingUpSql() (*asset, error) {
	bytes, err := _000002_indexingUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000002_indexing.up.sql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xe1, 0x40, 0x83, 0xd5, 0x96, 0xa7, 0xde, 0xc2, 0x7c, 0x9, 0xa4, 0x48, 0x77, 0x6a, 0xfa, 0xf1, 0x95, 0x4b, 0xe, 0xa8, 0x95, 0xb7, 0xe8, 0x79, 0x11, 0xda, 0x6, 0x2e, 0xaf, 0xd9, 0x64, 0x15}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_create_table.down.sql": _000001_create_tableDownSql,
	"000001_create_table.up.sql":   _000001_create_tableUpSql,
	"000002_indexing.down.sql":     _000002_indexingDownSql,
	"000002_indexing.up.sql":       _000002_indexingUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_create_table.down.sql": {_000001_create_tableDownSql, map[string]*bintree{}},
	"000001_create_table.up.sql":   {_000001_create_tableUpSql, map[string]*bintree{}},
	"000002_indexing.down.sql":     {_000002_indexingDownSql, map[string]*bintree{}},
	"000002_indexing.up.sql":       {_000002_indexingUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
